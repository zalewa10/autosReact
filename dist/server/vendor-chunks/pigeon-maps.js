"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pigeon-maps";
exports.ids = ["vendor-chunks/pigeon-maps"];
exports.modules = {

/***/ "(ssr)/./node_modules/pigeon-maps/lib/index.esm.js":
/*!***************************************************!*\
  !*** ./node_modules/pigeon-maps/lib/index.esm.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Draggable: () => (/* binding */ Draggable),\n/* harmony export */   GeoJson: () => (/* binding */ GeoJson),\n/* harmony export */   GeoJsonFeature: () => (/* binding */ GeoJsonFeature),\n/* harmony export */   GeoJsonLoader: () => (/* binding */ GeoJsonLoader),\n/* harmony export */   Map: () => (/* binding */ Map),\n/* harmony export */   Marker: () => (/* binding */ Marker),\n/* harmony export */   Overlay: () => (/* binding */ Overlay),\n/* harmony export */   ZoomControl: () => (/* binding */ ZoomControl)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread2(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _defineProperty(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction _inheritsLoose(subClass, superClass) {\n    subClass.prototype = Object.create(superClass.prototype);\n    subClass.prototype.constructor = subClass;\n    _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n        o.__proto__ = p;\n        return o;\n    };\n    return _setPrototypeOf(o, p);\n}\nfunction _assertThisInitialized(self) {\n    if (self === void 0) {\n        throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return self;\n}\nfunction debounce(func, wait) {\n    var timeout;\n    return function() {\n        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){\n            args[_key] = arguments[_key];\n        }\n        var context = this;\n        clearTimeout(timeout);\n        timeout = setTimeout(function() {\n            return func.apply(context, args);\n        }, wait);\n    };\n}\nfunction parentHasClass(element, className) {\n    while(element){\n        if (element.classList && element.classList.contains(className)) {\n            return true;\n        }\n        element = element.parentElement;\n    }\n    return false;\n}\nfunction parentPosition(element) {\n    var rect = element.getBoundingClientRect();\n    return {\n        x: rect.left,\n        y: rect.top\n    };\n}\nfunction osm(x, y, z) {\n    var s = String.fromCharCode(97 + (x + y + z) % 3);\n    return \"https://\" + s + \".tile.openstreetmap.org/\" + z + \"/\" + x + \"/\" + y + \".png\";\n}\nvar ANIMATION_TIME = 300;\nvar DIAGONAL_THROW_TIME = 1500;\nvar SCROLL_PIXELS_FOR_ZOOM_LEVEL = 150;\nvar MIN_DRAG_FOR_THROW = 40;\nvar CLICK_TOLERANCE = 2;\nvar DOUBLE_CLICK_DELAY = 300;\nvar DEBOUNCE_DELAY = 60;\nvar PINCH_RELEASE_THROW_DELAY = 300;\nvar WARNING_DISPLAY_TIMEOUT = 300;\nvar NOOP = function NOOP() {\n    return true;\n};\nvar lng2tile = function lng2tile(lon, zoom) {\n    return (lon + 180) / 360 * Math.pow(2, zoom);\n};\nvar lat2tile = function lat2tile(lat, zoom) {\n    return (1 - Math.log(Math.tan(lat * Math.PI / 180) + 1 / Math.cos(lat * Math.PI / 180)) / Math.PI) / 2 * Math.pow(2, zoom);\n};\nfunction tile2lng(x, z) {\n    return x / Math.pow(2, z) * 360 - 180;\n}\nfunction tile2lat(y, z) {\n    var n = Math.PI - 2 * Math.PI * y / Math.pow(2, z);\n    return 180 / Math.PI * Math.atan(0.5 * (Math.exp(n) - Math.exp(-n)));\n}\nfunction getMousePixel(dom, event) {\n    var parent = parentPosition(dom);\n    return [\n        event.clientX - parent.x,\n        event.clientY - parent.y\n    ];\n}\nfunction easeOutQuad(t) {\n    return t * (2 - t);\n}\nvar absoluteMinMax = [\n    tile2lat(Math.pow(2, 10), 10),\n    tile2lat(0, 10),\n    tile2lng(0, 10),\n    tile2lng(Math.pow(2, 10), 10)\n];\nvar hasWindow = \"undefined\" !== \"undefined\";\nvar performanceNow = hasWindow && window.performance && window.performance.now ? function() {\n    return window.performance.now();\n} : function() {\n    var timeStart = new Date().getTime();\n    return function() {\n        return new Date().getTime() - timeStart;\n    };\n}();\nvar requestAnimationFrame = function requestAnimationFrame(callback) {\n    if (hasWindow) {\n        return (window.requestAnimationFrame || window.setTimeout)(callback);\n    } else {\n        callback(new Date().getTime());\n        return null;\n    }\n};\nvar cancelAnimationFrame = function cancelAnimationFrame(animFrame) {\n    return hasWindow && animFrame ? (window.cancelAnimationFrame || window.clearTimeout)(animFrame) : false;\n};\nfunction srcSet(dprs, url, x, y, z) {\n    if (!dprs || dprs.length === 0) {\n        return \"\";\n    }\n    return dprs.map(function(dpr) {\n        return url(x, y, z, dpr) + (dpr === 1 ? \"\" : \" \" + dpr + \"x\");\n    }).join(\", \");\n}\nvar ImgTile = function ImgTile(_ref) {\n    var tile = _ref.tile, tileLoaded = _ref.tileLoaded;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"img\", {\n        src: tile.url,\n        srcSet: tile.srcSet,\n        width: tile.width,\n        height: tile.height,\n        loading: \"lazy\",\n        onLoad: tileLoaded,\n        alt: \"\",\n        style: {\n            position: \"absolute\",\n            left: tile.left,\n            top: tile.top,\n            willChange: \"transform\",\n            transformOrigin: \"top left\",\n            opacity: 1\n        }\n    });\n};\nvar Map = /*#__PURE__*/ function(_Component) {\n    _inheritsLoose(Map, _Component);\n    function Map(props) {\n        var _ref2, _props$defaultZoom, _ref3, _props$defaultCenter, _ref4, _props$width, _ref5, _props$height;\n        var _this;\n        _this = _Component.call(this, props) || this;\n        _defineProperty(_assertThisInitialized(_this), \"_containerRef\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_mousePosition\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_loadTracker\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_dragStart\", null);\n        _defineProperty(_assertThisInitialized(_this), \"_mouseDown\", false);\n        _defineProperty(_assertThisInitialized(_this), \"_moveEvents\", []);\n        _defineProperty(_assertThisInitialized(_this), \"_lastClick\", null);\n        _defineProperty(_assertThisInitialized(_this), \"_lastTap\", null);\n        _defineProperty(_assertThisInitialized(_this), \"_lastWheel\", null);\n        _defineProperty(_assertThisInitialized(_this), \"_touchStartPixel\", null);\n        _defineProperty(_assertThisInitialized(_this), \"_touchStartMidPoint\", null);\n        _defineProperty(_assertThisInitialized(_this), \"_touchStartDistance\", null);\n        _defineProperty(_assertThisInitialized(_this), \"_secondTouchEnd\", null);\n        _defineProperty(_assertThisInitialized(_this), \"_warningClearTimeout\", null);\n        _defineProperty(_assertThisInitialized(_this), \"_isAnimating\", false);\n        _defineProperty(_assertThisInitialized(_this), \"_animationStart\", null);\n        _defineProperty(_assertThisInitialized(_this), \"_animationEnd\", null);\n        _defineProperty(_assertThisInitialized(_this), \"_zoomStart\", null);\n        _defineProperty(_assertThisInitialized(_this), \"_centerTarget\", null);\n        _defineProperty(_assertThisInitialized(_this), \"_zoomTarget\", null);\n        _defineProperty(_assertThisInitialized(_this), \"_zoomAround\", null);\n        _defineProperty(_assertThisInitialized(_this), \"_animFrame\", null);\n        _defineProperty(_assertThisInitialized(_this), \"_boundsSynced\", false);\n        _defineProperty(_assertThisInitialized(_this), \"_minMaxCache\", null);\n        _defineProperty(_assertThisInitialized(_this), \"_lastZoom\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_lastCenter\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_centerStart\", void 0);\n        _defineProperty(_assertThisInitialized(_this), \"_resizeObserver\", null);\n        _defineProperty(_assertThisInitialized(_this), \"updateWidthHeight\", function() {\n            if (_this._containerRef) {\n                var rect = _this._containerRef.getBoundingClientRect();\n                if (rect && rect.width > 0 && rect.height > 0) {\n                    _this.setState({\n                        width: rect.width,\n                        height: rect.height\n                    });\n                    return true;\n                }\n            }\n            return false;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"wa\", function() {\n            var _window;\n            return (_window = window).addEventListener.apply(_window, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"wr\", function() {\n            var _window2;\n            return (_window2 = window).removeEventListener.apply(_window2, arguments);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"bindMouseEvents\", function() {\n            _this.wa(\"mousedown\", _this.handleMouseDown);\n            _this.wa(\"mouseup\", _this.handleMouseUp);\n            _this.wa(\"mousemove\", _this.handleMouseMove);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"bindTouchEvents\", function() {\n            _this.wa(\"touchstart\", _this.handleTouchStart, {\n                passive: false\n            });\n            _this.wa(\"touchmove\", _this.handleTouchMove, {\n                passive: false\n            });\n            _this.wa(\"touchend\", _this.handleTouchEnd, {\n                passive: false\n            });\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unbindMouseEvents\", function() {\n            _this.wr(\"mousedown\", _this.handleMouseDown);\n            _this.wr(\"mouseup\", _this.handleMouseUp);\n            _this.wr(\"mousemove\", _this.handleMouseMove);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unbindTouchEvents\", function() {\n            _this.wr(\"touchstart\", _this.handleTouchStart);\n            _this.wr(\"touchmove\", _this.handleTouchMove);\n            _this.wr(\"touchend\", _this.handleTouchEnd);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"bindResizeEvent\", function() {\n            _this.wa(\"resize\", _this.updateWidthHeight);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unbindResizeEvent\", function() {\n            _this.wr(\"resize\", _this.updateWidthHeight);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"bindWheelEvent\", function() {\n            if (_this._containerRef) {\n                _this._containerRef.addEventListener(\"wheel\", _this.handleWheel, {\n                    passive: false\n                });\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"unbindWheelEvent\", function() {\n            if (_this._containerRef) {\n                _this._containerRef.removeEventListener(\"wheel\", _this.handleWheel);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"setCenterZoomTarget\", function(center, zoom, fromProps, zoomAround, animationDuration) {\n            if (fromProps === void 0) {\n                fromProps = false;\n            }\n            if (zoomAround === void 0) {\n                zoomAround = null;\n            }\n            if (animationDuration === void 0) {\n                animationDuration = ANIMATION_TIME;\n            }\n            if (_this.props.animate && (!fromProps || _this.distanceInScreens(center, zoom, _this.state.center, _this.state.zoom) <= _this.props.animateMaxScreens)) {\n                if (_this._isAnimating) {\n                    cancelAnimationFrame(_this._animFrame);\n                    var _this$animationStep = _this.animationStep(performanceNow()), centerStep = _this$animationStep.centerStep, zoomStep = _this$animationStep.zoomStep;\n                    _this._centerStart = centerStep;\n                    _this._zoomStart = zoomStep;\n                } else {\n                    _this._isAnimating = true;\n                    _this._centerStart = _this.limitCenterAtZoom([\n                        _this._lastCenter[0],\n                        _this._lastCenter[1]\n                    ], _this._lastZoom);\n                    _this._zoomStart = _this._lastZoom;\n                    _this.onAnimationStart();\n                }\n                _this._animationStart = performanceNow();\n                _this._animationEnd = _this._animationStart + animationDuration;\n                if (zoomAround) {\n                    _this._zoomAround = zoomAround;\n                    _this._centerTarget = _this.calculateZoomCenter(_this._lastCenter, zoomAround, _this._lastZoom, zoom);\n                } else {\n                    _this._zoomAround = null;\n                    _this._centerTarget = center;\n                }\n                _this._zoomTarget = zoom;\n                _this._animFrame = requestAnimationFrame(_this.animate);\n            } else {\n                _this.stopAnimating();\n                if (zoomAround) {\n                    var _center = _this.calculateZoomCenter(_this._lastCenter, zoomAround, _this._lastZoom, zoom);\n                    _this.setCenterZoom(_center, zoom, fromProps);\n                } else {\n                    _this.setCenterZoom(center || _this.state.center, zoom, fromProps);\n                }\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"setCenterZoomForChildren\", function(center, zoom) {\n            _this.setCenterZoomTarget(center || _this.state.center, zoom || _this.state.zoom, true);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"distanceInScreens\", function(centerTarget, zoomTarget, center, zoom) {\n            var _this$state = _this.state, width = _this$state.width, height = _this$state.height;\n            var l1 = _this.latLngToPixel(center, center, zoom);\n            var l2 = _this.latLngToPixel(centerTarget, center, zoom);\n            var z1 = _this.latLngToPixel(center, center, zoomTarget);\n            var z2 = _this.latLngToPixel(centerTarget, center, zoomTarget);\n            var w = (Math.abs(l1[0] - l2[0]) + Math.abs(z1[0] - z2[0])) / 2 / width;\n            var h = (Math.abs(l1[1] - l2[1]) + Math.abs(z1[1] - z2[1])) / 2 / height;\n            return Math.sqrt(w * w + h * h);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"animationStep\", function(timestamp) {\n            if (!_this._animationEnd || !_this._animationStart || !_this._zoomTarget || !_this._zoomStart || !_this._centerStart || !_this._centerTarget) {\n                return {\n                    centerStep: _this.state.center,\n                    zoomStep: _this.state.zoom\n                };\n            }\n            var length = _this._animationEnd - _this._animationStart;\n            var progress = Math.max(timestamp - _this._animationStart, 0);\n            var percentage = easeOutQuad(progress / length);\n            var zoomDiff = (_this._zoomTarget - _this._zoomStart) * percentage;\n            var zoomStep = _this._zoomStart + zoomDiff;\n            if (_this._zoomAround) {\n                var centerStep = _this.calculateZoomCenter(_this._centerStart, _this._zoomAround, _this._zoomStart, zoomStep);\n                return {\n                    centerStep: centerStep,\n                    zoomStep: zoomStep\n                };\n            } else {\n                var _centerStep = [\n                    _this._centerStart[0] + (_this._centerTarget[0] - _this._centerStart[0]) * percentage,\n                    _this._centerStart[1] + (_this._centerTarget[1] - _this._centerStart[1]) * percentage\n                ];\n                return {\n                    centerStep: _centerStep,\n                    zoomStep: zoomStep\n                };\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"animate\", function(timestamp) {\n            if (!_this._animationEnd || timestamp >= _this._animationEnd) {\n                _this._isAnimating = false;\n                _this.setCenterZoom(_this._centerTarget, _this._zoomTarget, true);\n                _this.onAnimationStop();\n            } else {\n                var _this$animationStep2 = _this.animationStep(timestamp), centerStep = _this$animationStep2.centerStep, zoomStep = _this$animationStep2.zoomStep;\n                _this.setCenterZoom(centerStep, zoomStep);\n                _this._animFrame = requestAnimationFrame(_this.animate);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"stopAnimating\", function() {\n            if (_this._isAnimating) {\n                _this._isAnimating = false;\n                _this.onAnimationStop();\n                cancelAnimationFrame(_this._animFrame);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"limitCenterAtZoom\", function(center, zoom) {\n            var minMax = _this.getBoundsMinMax(zoom || _this.state.zoom);\n            return [\n                Math.max(Math.min(!center || isNaN(center[0]) ? _this.state.center[0] : center[0], minMax[1]), minMax[0]),\n                Math.max(Math.min(!center || isNaN(center[1]) ? _this.state.center[1] : center[1], minMax[3]), minMax[2])\n            ];\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onAnimationStart\", function() {\n            _this.props.onAnimationStart && _this.props.onAnimationStart();\n        });\n        _defineProperty(_assertThisInitialized(_this), \"onAnimationStop\", function() {\n            _this.props.onAnimationStop && _this.props.onAnimationStop();\n        });\n        _defineProperty(_assertThisInitialized(_this), \"setCenterZoom\", function(center, zoom, animationEnded) {\n            if (animationEnded === void 0) {\n                animationEnded = false;\n            }\n            var limitedCenter = _this.limitCenterAtZoom(center, zoom);\n            if (zoom && Math.round(_this.state.zoom) !== Math.round(zoom)) {\n                var tileValues = _this.tileValues(_this.state);\n                var nextValues = _this.tileValues({\n                    center: limitedCenter,\n                    zoom: zoom,\n                    width: _this.state.width,\n                    height: _this.state.height\n                });\n                var oldTiles = _this.state.oldTiles;\n                _this.setState({\n                    oldTiles: oldTiles.filter(function(o) {\n                        return o.roundedZoom !== tileValues.roundedZoom;\n                    }).concat(tileValues)\n                }, NOOP);\n                var loadTracker = {};\n                for(var x = nextValues.tileMinX; x <= nextValues.tileMaxX; x++){\n                    for(var y = nextValues.tileMinY; y <= nextValues.tileMaxY; y++){\n                        var key = x + \"-\" + y + \"-\" + nextValues.roundedZoom;\n                        loadTracker[key] = false;\n                    }\n                }\n                _this._loadTracker = loadTracker;\n            }\n            _this.setState({\n                center: limitedCenter,\n                zoom: zoom || _this.state.zoom\n            }, NOOP);\n            var maybeZoom = _this.props.zoom ? _this.props.zoom : _this._lastZoom;\n            var maybeCenter = _this.props.center ? _this.props.center : _this._lastCenter;\n            if (zoom && (animationEnded || Math.abs(maybeZoom - zoom) > 0.001 || Math.abs(maybeCenter[0] - limitedCenter[0]) > 0.00001 || Math.abs(maybeCenter[1] - limitedCenter[1]) > 0.00001)) {\n                _this._lastZoom = zoom;\n                _this._lastCenter = [].concat(limitedCenter);\n                _this.syncToProps(limitedCenter, zoom);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"getBoundsMinMax\", function(zoom) {\n            if (_this.props.limitBounds === \"center\") {\n                return absoluteMinMax;\n            }\n            var _this$state2 = _this.state, width = _this$state2.width, height = _this$state2.height;\n            if (_this._minMaxCache && _this._minMaxCache[0] === zoom && _this._minMaxCache[1] === width && _this._minMaxCache[2] === height) {\n                return _this._minMaxCache[3];\n            }\n            var pixelsAtZoom = Math.pow(2, zoom) * 256;\n            var minLng = width > pixelsAtZoom ? 0 : tile2lng(width / 512, zoom);\n            var minLat = height > pixelsAtZoom ? 0 : tile2lat(Math.pow(2, zoom) - height / 512, zoom);\n            var maxLng = width > pixelsAtZoom ? 0 : tile2lng(Math.pow(2, zoom) - width / 512, zoom);\n            var maxLat = height > pixelsAtZoom ? 0 : tile2lat(height / 512, zoom);\n            var minMax = [\n                minLat,\n                maxLat,\n                minLng,\n                maxLng\n            ];\n            _this._minMaxCache = [\n                zoom,\n                width,\n                height,\n                minMax\n            ];\n            return minMax;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"tileLoaded\", function(key) {\n            if (_this._loadTracker && key in _this._loadTracker) {\n                _this._loadTracker[key] = true;\n                var unloadedCount = Object.values(_this._loadTracker).filter(function(v) {\n                    return !v;\n                }).length;\n                if (unloadedCount === 0) {\n                    _this.setState({\n                        oldTiles: []\n                    }, NOOP);\n                }\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleTouchStart\", function(event) {\n            if (!_this._containerRef) {\n                return;\n            }\n            if (event.target && parentHasClass(event.target, \"pigeon-drag-block\")) {\n                return;\n            }\n            if (event.touches.length === 1) {\n                var touch = event.touches[0];\n                var pixel = getMousePixel(_this._containerRef, touch);\n                if (_this.coordsInside(pixel)) {\n                    _this._touchStartPixel = [\n                        pixel\n                    ];\n                    if (!_this.props.twoFingerDrag) {\n                        _this.stopAnimating();\n                        if (_this._lastTap && performanceNow() - _this._lastTap < DOUBLE_CLICK_DELAY) {\n                            event.preventDefault();\n                            var latLngNow = _this.pixelToLatLng(_this._touchStartPixel[0]);\n                            _this.setCenterZoomTarget(null, Math.max(_this.props.minZoom, Math.min(_this.state.zoom + 1, _this.props.maxZoom)), false, latLngNow);\n                        } else {\n                            _this._lastTap = performanceNow();\n                            _this.trackMoveEvents(pixel);\n                        }\n                    }\n                }\n            } else if (event.touches.length === 2 && _this._touchStartPixel) {\n                event.preventDefault();\n                _this.stopTrackingMoveEvents();\n                if (_this.state.pixelDelta || _this.state.zoomDelta) {\n                    _this.sendDeltaChange();\n                }\n                var t1 = getMousePixel(_this._containerRef, event.touches[0]);\n                var t2 = getMousePixel(_this._containerRef, event.touches[1]);\n                _this._touchStartPixel = [\n                    t1,\n                    t2\n                ];\n                _this._touchStartMidPoint = [\n                    (t1[0] + t2[0]) / 2,\n                    (t1[1] + t2[1]) / 2\n                ];\n                _this._touchStartDistance = Math.sqrt(Math.pow(t1[0] - t2[0], 2) + Math.pow(t1[1] - t2[1], 2));\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleTouchMove\", function(event) {\n            if (!_this._containerRef) {\n                _this._touchStartPixel = null;\n                return;\n            }\n            if (event.touches.length === 1 && _this._touchStartPixel) {\n                var touch = event.touches[0];\n                var pixel = getMousePixel(_this._containerRef, touch);\n                if (_this.props.twoFingerDrag) {\n                    if (_this.coordsInside(pixel)) {\n                        _this.showWarning(\"fingers\");\n                    }\n                } else {\n                    event.preventDefault();\n                    _this.trackMoveEvents(pixel);\n                    _this.setState({\n                        pixelDelta: [\n                            pixel[0] - _this._touchStartPixel[0][0],\n                            pixel[1] - _this._touchStartPixel[0][1]\n                        ]\n                    }, NOOP);\n                }\n            } else if (event.touches.length === 2 && _this._touchStartPixel && _this._touchStartMidPoint && _this._touchStartDistance) {\n                var _this$state3 = _this.state, width = _this$state3.width, height = _this$state3.height, zoom = _this$state3.zoom;\n                event.preventDefault();\n                var t1 = getMousePixel(_this._containerRef, event.touches[0]);\n                var t2 = getMousePixel(_this._containerRef, event.touches[1]);\n                var midPoint = [\n                    (t1[0] + t2[0]) / 2,\n                    (t1[1] + t2[1]) / 2\n                ];\n                var midPointDiff = [\n                    midPoint[0] - _this._touchStartMidPoint[0],\n                    midPoint[1] - _this._touchStartMidPoint[1]\n                ];\n                var distance = Math.sqrt(Math.pow(t1[0] - t2[0], 2) + Math.pow(t1[1] - t2[1], 2));\n                var zoomDelta = Math.max(_this.props.minZoom, Math.min(_this.props.maxZoom, zoom + Math.log2(distance / _this._touchStartDistance))) - zoom;\n                var scale = Math.pow(2, zoomDelta);\n                var centerDiffDiff = [\n                    (width / 2 - midPoint[0]) * (scale - 1),\n                    (height / 2 - midPoint[1]) * (scale - 1)\n                ];\n                _this.setState({\n                    zoomDelta: zoomDelta,\n                    pixelDelta: [\n                        centerDiffDiff[0] + midPointDiff[0] * scale,\n                        centerDiffDiff[1] + midPointDiff[1] * scale\n                    ]\n                }, NOOP);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleTouchEnd\", function(event) {\n            if (!_this._containerRef) {\n                _this._touchStartPixel = null;\n                return;\n            }\n            if (_this._touchStartPixel) {\n                var _this$props = _this.props, zoomSnap = _this$props.zoomSnap, twoFingerDrag = _this$props.twoFingerDrag, minZoom = _this$props.minZoom, maxZoom = _this$props.maxZoom;\n                var zoomDelta = _this.state.zoomDelta;\n                var _this$sendDeltaChange = _this.sendDeltaChange(), center = _this$sendDeltaChange.center, zoom = _this$sendDeltaChange.zoom;\n                if (event.touches.length === 0) {\n                    if (twoFingerDrag) {\n                        _this.clearWarning();\n                    } else {\n                        var oldTouchPixel = _this._touchStartPixel[0];\n                        var newTouchPixel = getMousePixel(_this._containerRef, event.changedTouches[0]);\n                        if (Math.abs(oldTouchPixel[0] - newTouchPixel[0]) > CLICK_TOLERANCE || Math.abs(oldTouchPixel[1] - newTouchPixel[1]) > CLICK_TOLERANCE) {\n                            if (!_this._secondTouchEnd || performanceNow() - _this._secondTouchEnd > PINCH_RELEASE_THROW_DELAY) {\n                                event.preventDefault();\n                                _this.throwAfterMoving(newTouchPixel, center, zoom);\n                            }\n                        }\n                        _this._touchStartPixel = null;\n                        _this._secondTouchEnd = null;\n                    }\n                } else if (event.touches.length === 1) {\n                    event.preventDefault();\n                    var touch = getMousePixel(_this._containerRef, event.touches[0]);\n                    _this._secondTouchEnd = performanceNow();\n                    _this._touchStartPixel = [\n                        touch\n                    ];\n                    _this.trackMoveEvents(touch);\n                    if (zoomSnap) {\n                        var latLng = _this._touchStartMidPoint ? _this.pixelToLatLng(_this._touchStartMidPoint) : _this.state.center;\n                        var zoomTarget;\n                        if (twoFingerDrag && Math.round(_this.state.zoom) === Math.round(_this.state.zoom + zoomDelta)) {\n                            zoomTarget = Math.round(_this.state.zoom);\n                        } else {\n                            zoomTarget = zoomDelta > 0 ? Math.ceil(_this.state.zoom) : Math.floor(_this.state.zoom);\n                        }\n                        var _zoom = Math.max(minZoom, Math.min(zoomTarget, maxZoom));\n                        _this.setCenterZoomTarget(latLng, _zoom, false, latLng);\n                    }\n                }\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleMouseDown\", function(event) {\n            if (!_this._containerRef) {\n                return;\n            }\n            var pixel = getMousePixel(_this._containerRef, event);\n            if (event.button === 0 && (!event.target || !parentHasClass(event.target, \"pigeon-drag-block\")) && _this.coordsInside(pixel)) {\n                _this.stopAnimating();\n                event.preventDefault();\n                if (_this._lastClick && performanceNow() - _this._lastClick < DOUBLE_CLICK_DELAY) {\n                    if (!parentHasClass(event.target, \"pigeon-click-block\")) {\n                        var latLngNow = _this.pixelToLatLng(_this._mousePosition || pixel);\n                        _this.setCenterZoomTarget(null, Math.max(_this.props.minZoom, Math.min(_this.state.zoom + 1, _this.props.maxZoom)), false, latLngNow);\n                    }\n                } else {\n                    _this._lastClick = performanceNow();\n                    _this._mouseDown = true;\n                    _this._dragStart = pixel;\n                    _this.trackMoveEvents(pixel);\n                }\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleMouseMove\", function(event) {\n            if (!_this._containerRef) {\n                return;\n            }\n            _this._mousePosition = getMousePixel(_this._containerRef, event);\n            if (_this._mouseDown && _this._dragStart) {\n                _this.trackMoveEvents(_this._mousePosition);\n                _this.setState({\n                    pixelDelta: [\n                        _this._mousePosition[0] - _this._dragStart[0],\n                        _this._mousePosition[1] - _this._dragStart[1]\n                    ]\n                }, NOOP);\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleMouseUp\", function(event) {\n            if (!_this._containerRef) {\n                _this._mouseDown = false;\n                return;\n            }\n            var pixelDelta = _this.state.pixelDelta;\n            if (_this._mouseDown) {\n                _this._mouseDown = false;\n                var pixel = getMousePixel(_this._containerRef, event);\n                if (_this.props.onClick && (!event.target || !parentHasClass(event.target, \"pigeon-click-block\")) && (!pixelDelta || Math.abs(pixelDelta[0]) + Math.abs(pixelDelta[1]) <= CLICK_TOLERANCE)) {\n                    var latLng = _this.pixelToLatLng(pixel);\n                    _this.props.onClick({\n                        event: event,\n                        latLng: latLng,\n                        pixel: pixel\n                    });\n                    _this.setState({\n                        pixelDelta: undefined\n                    }, NOOP);\n                } else {\n                    var _this$sendDeltaChange2 = _this.sendDeltaChange(), center = _this$sendDeltaChange2.center, zoom = _this$sendDeltaChange2.zoom;\n                    _this.throwAfterMoving(pixel, center, zoom);\n                }\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"stopTrackingMoveEvents\", function() {\n            _this._moveEvents = [];\n        });\n        _defineProperty(_assertThisInitialized(_this), \"trackMoveEvents\", function(coords) {\n            var timestamp = performanceNow();\n            if (_this._moveEvents.length === 0 || timestamp - _this._moveEvents[_this._moveEvents.length - 1].timestamp > 40) {\n                _this._moveEvents.push({\n                    timestamp: timestamp,\n                    coords: coords\n                });\n                if (_this._moveEvents.length > 2) {\n                    _this._moveEvents.shift();\n                }\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"throwAfterMoving\", function(coords, center, zoom) {\n            var _this$state4 = _this.state, width = _this$state4.width, height = _this$state4.height;\n            var animate = _this.props.animate;\n            var timestamp = performanceNow();\n            var lastEvent = _this._moveEvents.shift();\n            if (lastEvent && animate) {\n                var deltaMs = Math.max(timestamp - lastEvent.timestamp, 1);\n                var delta = [\n                    (coords[0] - lastEvent.coords[0]) / deltaMs * 120,\n                    (coords[1] - lastEvent.coords[1]) / deltaMs * 120\n                ];\n                var distance = Math.sqrt(delta[0] * delta[0] + delta[1] * delta[1]);\n                if (distance > MIN_DRAG_FOR_THROW) {\n                    var diagonal = Math.sqrt(width * width + height * height);\n                    var throwTime = DIAGONAL_THROW_TIME * distance / diagonal;\n                    var lng = tile2lng(lng2tile(center[1], zoom) - delta[0] / 256.0, zoom);\n                    var lat = tile2lat(lat2tile(center[0], zoom) - delta[1] / 256.0, zoom);\n                    _this.setCenterZoomTarget([\n                        lat,\n                        lng\n                    ], zoom, false, null, throwTime);\n                }\n            }\n            _this.stopTrackingMoveEvents();\n        });\n        _defineProperty(_assertThisInitialized(_this), \"sendDeltaChange\", function() {\n            var _this$state5 = _this.state, center = _this$state5.center, zoom = _this$state5.zoom, pixelDelta = _this$state5.pixelDelta, zoomDelta = _this$state5.zoomDelta;\n            var lat = center[0];\n            var lng = center[1];\n            if (pixelDelta || zoomDelta !== 0) {\n                lng = tile2lng(lng2tile(center[1], zoom + zoomDelta) - (pixelDelta ? pixelDelta[0] / 256.0 : 0), zoom + zoomDelta);\n                lat = tile2lat(lat2tile(center[0], zoom + zoomDelta) - (pixelDelta ? pixelDelta[1] / 256.0 : 0), zoom + zoomDelta);\n                _this.setCenterZoom([\n                    lat,\n                    lng\n                ], zoom + zoomDelta);\n            }\n            _this.setState({\n                pixelDelta: undefined,\n                zoomDelta: 0\n            }, NOOP);\n            return {\n                center: _this.limitCenterAtZoom([\n                    lat,\n                    lng\n                ], zoom + zoomDelta),\n                zoom: zoom + zoomDelta\n            };\n        });\n        _defineProperty(_assertThisInitialized(_this), \"getBounds\", function(center, zoom) {\n            if (center === void 0) {\n                center = _this.state.center;\n            }\n            if (zoom === void 0) {\n                zoom = _this.zoomPlusDelta();\n            }\n            var _this$state6 = _this.state, width = _this$state6.width, height = _this$state6.height;\n            return {\n                ne: _this.pixelToLatLng([\n                    width - 1,\n                    0\n                ], center, zoom),\n                sw: _this.pixelToLatLng([\n                    0,\n                    height - 1\n                ], center, zoom)\n            };\n        });\n        _defineProperty(_assertThisInitialized(_this), \"syncToProps\", function(center, zoom) {\n            if (center === void 0) {\n                center = _this.state.center;\n            }\n            if (zoom === void 0) {\n                zoom = _this.state.zoom;\n            }\n            var onBoundsChanged = _this.props.onBoundsChanged;\n            if (onBoundsChanged) {\n                var bounds = _this.getBounds(center, zoom);\n                onBoundsChanged({\n                    center: center,\n                    zoom: zoom,\n                    bounds: bounds,\n                    initial: !_this._boundsSynced\n                });\n                _this._boundsSynced = true;\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"handleWheel\", function(event) {\n            var _this$props2 = _this.props, mouseEvents = _this$props2.mouseEvents, metaWheelZoom = _this$props2.metaWheelZoom, zoomSnap = _this$props2.zoomSnap, animate = _this$props2.animate;\n            if (!mouseEvents) {\n                return;\n            }\n            if (!metaWheelZoom || event.metaKey || event.ctrlKey) {\n                event.preventDefault();\n                var addToZoom = -event.deltaY / SCROLL_PIXELS_FOR_ZOOM_LEVEL;\n                if (!zoomSnap && _this._zoomTarget) {\n                    var stillToAdd = _this._zoomTarget - _this.state.zoom;\n                    _this.zoomAroundMouse(addToZoom + stillToAdd, event);\n                } else {\n                    if (animate) {\n                        _this.zoomAroundMouse(addToZoom, event);\n                    } else {\n                        if (!_this._lastWheel || performanceNow() - _this._lastWheel > ANIMATION_TIME) {\n                            _this._lastWheel = performanceNow();\n                            _this.zoomAroundMouse(addToZoom, event);\n                        }\n                    }\n                }\n            } else {\n                _this.showWarning(\"wheel\");\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"showWarning\", function(warningType) {\n            if (!_this.state.showWarning || _this.state.warningType !== warningType) {\n                _this.setState({\n                    showWarning: true,\n                    warningType: warningType\n                });\n            }\n            if (_this._warningClearTimeout) {\n                window.clearTimeout(_this._warningClearTimeout);\n            }\n            _this._warningClearTimeout = window.setTimeout(_this.clearWarning, WARNING_DISPLAY_TIMEOUT);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"clearWarning\", function() {\n            if (_this.state.showWarning) {\n                _this.setState({\n                    showWarning: false\n                });\n            }\n        });\n        _defineProperty(_assertThisInitialized(_this), \"zoomAroundMouse\", function(zoomDiff, event) {\n            if (!_this._containerRef) {\n                return;\n            }\n            var zoom = _this.state.zoom;\n            var _this$props3 = _this.props, minZoom = _this$props3.minZoom, maxZoom = _this$props3.maxZoom, zoomSnap = _this$props3.zoomSnap;\n            _this._mousePosition = getMousePixel(_this._containerRef, event);\n            if (!_this._mousePosition || zoom === minZoom && zoomDiff < 0 || zoom === maxZoom && zoomDiff > 0) {\n                return;\n            }\n            var latLngNow = _this.pixelToLatLng(_this._mousePosition);\n            var zoomTarget = zoom + zoomDiff;\n            if (zoomSnap) {\n                zoomTarget = zoomDiff < 0 ? Math.floor(zoomTarget) : Math.ceil(zoomTarget);\n            }\n            zoomTarget = Math.max(minZoom, Math.min(zoomTarget, maxZoom));\n            _this.setCenterZoomTarget(null, zoomTarget, false, latLngNow);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"zoomPlusDelta\", function() {\n            return _this.state.zoom + _this.state.zoomDelta;\n        });\n        _defineProperty(_assertThisInitialized(_this), \"pixelToLatLng\", function(pixel, center, zoom) {\n            if (center === void 0) {\n                center = _this.state.center;\n            }\n            if (zoom === void 0) {\n                zoom = _this.zoomPlusDelta();\n            }\n            var _this$state7 = _this.state, width = _this$state7.width, height = _this$state7.height, pixelDelta = _this$state7.pixelDelta;\n            var pointDiff = [\n                (pixel[0] - width / 2 - (pixelDelta ? pixelDelta[0] : 0)) / 256.0,\n                (pixel[1] - height / 2 - (pixelDelta ? pixelDelta[1] : 0)) / 256.0\n            ];\n            var tileX = lng2tile(center[1], zoom) + pointDiff[0];\n            var tileY = lat2tile(center[0], zoom) + pointDiff[1];\n            return [\n                Math.max(absoluteMinMax[0], Math.min(absoluteMinMax[1], tile2lat(tileY, zoom))),\n                Math.max(absoluteMinMax[2], Math.min(absoluteMinMax[3], tile2lng(tileX, zoom)))\n            ];\n        });\n        _defineProperty(_assertThisInitialized(_this), \"latLngToPixel\", function(latLng, center, zoom) {\n            if (center === void 0) {\n                center = _this.state.center;\n            }\n            if (zoom === void 0) {\n                zoom = _this.zoomPlusDelta();\n            }\n            var _this$state8 = _this.state, width = _this$state8.width, height = _this$state8.height, pixelDelta = _this$state8.pixelDelta;\n            var tileCenterX = lng2tile(center[1], zoom);\n            var tileCenterY = lat2tile(center[0], zoom);\n            var tileX = lng2tile(latLng[1], zoom);\n            var tileY = lat2tile(latLng[0], zoom);\n            return [\n                (tileX - tileCenterX) * 256.0 + width / 2 + (pixelDelta ? pixelDelta[0] : 0),\n                (tileY - tileCenterY) * 256.0 + height / 2 + (pixelDelta ? pixelDelta[1] : 0)\n            ];\n        });\n        _defineProperty(_assertThisInitialized(_this), \"calculateZoomCenter\", function(center, coords, oldZoom, newZoom) {\n            var _this$state9 = _this.state, width = _this$state9.width, height = _this$state9.height;\n            var pixelBefore = _this.latLngToPixel(coords, center, oldZoom);\n            var pixelAfter = _this.latLngToPixel(coords, center, newZoom);\n            var newCenter = _this.pixelToLatLng([\n                width / 2 + pixelAfter[0] - pixelBefore[0],\n                height / 2 + pixelAfter[1] - pixelBefore[1]\n            ], center, newZoom);\n            return _this.limitCenterAtZoom(newCenter, newZoom);\n        });\n        _defineProperty(_assertThisInitialized(_this), \"setRef\", function(dom) {\n            _this._containerRef = dom;\n        });\n        _this.syncToProps = debounce(_this.syncToProps, DEBOUNCE_DELAY);\n        _this._lastZoom = (_ref2 = (_props$defaultZoom = props.defaultZoom) !== null && _props$defaultZoom !== void 0 ? _props$defaultZoom : props.zoom) !== null && _ref2 !== void 0 ? _ref2 : 14;\n        _this._lastCenter = (_ref3 = (_props$defaultCenter = props.defaultCenter) !== null && _props$defaultCenter !== void 0 ? _props$defaultCenter : props.center) !== null && _ref3 !== void 0 ? _ref3 : [\n            0,\n            0\n        ];\n        _this.state = {\n            zoom: _this._lastZoom,\n            center: _this._lastCenter,\n            width: (_ref4 = (_props$width = props.width) !== null && _props$width !== void 0 ? _props$width : props.defaultWidth) !== null && _ref4 !== void 0 ? _ref4 : -1,\n            height: (_ref5 = (_props$height = props.height) !== null && _props$height !== void 0 ? _props$height : props.defaultHeight) !== null && _ref5 !== void 0 ? _ref5 : -1,\n            zoomDelta: 0,\n            pixelDelta: undefined,\n            oldTiles: [],\n            showWarning: false,\n            warningType: undefined\n        };\n        return _this;\n    }\n    var _proto = Map.prototype;\n    _proto.componentDidMount = function componentDidMount() {\n        var _this2 = this;\n        this.props.mouseEvents && this.bindMouseEvents();\n        this.props.touchEvents && this.bindTouchEvents();\n        if (!this.props.width || !this.props.height) {\n            if (!this.updateWidthHeight()) {\n                requestAnimationFrame(this.updateWidthHeight);\n            }\n            this.bindResizeEvent();\n        }\n        this.bindWheelEvent();\n        this.syncToProps();\n        if (typeof window.ResizeObserver !== \"undefined\") {\n            this._resizeObserver = new window.ResizeObserver(function() {\n                _this2.updateWidthHeight();\n            });\n            this._resizeObserver.observe(this._containerRef);\n        }\n    };\n    _proto.componentWillUnmount = function componentWillUnmount() {\n        this.props.mouseEvents && this.unbindMouseEvents();\n        this.props.touchEvents && this.unbindTouchEvents();\n        this.unbindWheelEvent();\n        if (!this.props.width || !this.props.height) {\n            this.unbindResizeEvent();\n        }\n        if (this._resizeObserver) {\n            this._resizeObserver.disconnect();\n        }\n    };\n    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n        var _prevProps$center;\n        if (this.props.mouseEvents !== prevProps.mouseEvents) {\n            this.props.mouseEvents ? this.bindMouseEvents() : this.unbindMouseEvents();\n        }\n        if (this.props.touchEvents !== prevProps.touchEvents) {\n            this.props.touchEvents ? this.bindTouchEvents() : this.unbindTouchEvents();\n        }\n        if (this.props.width && this.props.width !== prevProps.width) {\n            this.setState({\n                width: this.props.width\n            });\n        }\n        if (this.props.height && this.props.height !== prevProps.height) {\n            this.setState({\n                height: this.props.height\n            });\n        }\n        if (!this.props.center && !this.props.zoom) {\n            return;\n        }\n        if ((!this.props.center || this.props.center[0] === (prevProps === null || prevProps === void 0 ? void 0 : (_prevProps$center = prevProps.center) === null || _prevProps$center === void 0 ? void 0 : _prevProps$center[0]) && this.props.center[1] === prevProps.center[1]) && this.props.zoom === prevProps.zoom) {\n            return;\n        }\n        var currentCenter = this._isAnimating ? this._centerTarget : this.state.center;\n        var currentZoom = this._isAnimating ? this._zoomTarget : this.state.zoom;\n        if (currentCenter && currentZoom) {\n            var _this$props$center, _this$props$zoom;\n            var nextCenter = (_this$props$center = this.props.center) !== null && _this$props$center !== void 0 ? _this$props$center : currentCenter;\n            var nextZoom = (_this$props$zoom = this.props.zoom) !== null && _this$props$zoom !== void 0 ? _this$props$zoom : currentZoom;\n            if (Math.abs(nextZoom - currentZoom) > 0.001 || Math.abs(nextCenter[0] - currentCenter[0]) > 0.0001 || Math.abs(nextCenter[1] - currentCenter[1]) > 0.0001) {\n                this.setCenterZoomTarget(nextCenter, nextZoom, true);\n            }\n        }\n    };\n    _proto.coordsInside = function coordsInside(pixel) {\n        var _this$state10 = this.state, width = _this$state10.width, height = _this$state10.height;\n        if (pixel[0] < 0 || pixel[1] < 0 || pixel[0] >= width || pixel[1] >= height) {\n            return false;\n        }\n        var parent = this._containerRef;\n        if (parent) {\n            var pos = parentPosition(parent);\n            var element = document.elementFromPoint(pixel[0] + pos.x, pixel[1] + pos.y);\n            return parent === element || parent.contains(element);\n        } else {\n            return false;\n        }\n    };\n    _proto.tileValues = function tileValues(_ref6) {\n        var center = _ref6.center, zoom = _ref6.zoom, pixelDelta = _ref6.pixelDelta, zoomDelta = _ref6.zoomDelta, width = _ref6.width, height = _ref6.height;\n        var roundedZoom = Math.round(zoom + (zoomDelta || 0));\n        var zoomDiff = zoom + (zoomDelta || 0) - roundedZoom;\n        var scale = Math.pow(2, zoomDiff);\n        var scaleWidth = width / scale;\n        var scaleHeight = height / scale;\n        var tileCenterX = lng2tile(center[1], roundedZoom) - (pixelDelta ? pixelDelta[0] / 256.0 / scale : 0);\n        var tileCenterY = lat2tile(center[0], roundedZoom) - (pixelDelta ? pixelDelta[1] / 256.0 / scale : 0);\n        var halfWidth = scaleWidth / 2 / 256.0;\n        var halfHeight = scaleHeight / 2 / 256.0;\n        var tileMinX = Math.floor(tileCenterX - halfWidth);\n        var tileMaxX = Math.floor(tileCenterX + halfWidth);\n        var tileMinY = Math.floor(tileCenterY - halfHeight);\n        var tileMaxY = Math.floor(tileCenterY + halfHeight);\n        return {\n            tileMinX: tileMinX,\n            tileMaxX: tileMaxX,\n            tileMinY: tileMinY,\n            tileMaxY: tileMaxY,\n            tileCenterX: tileCenterX,\n            tileCenterY: tileCenterY,\n            roundedZoom: roundedZoom,\n            zoomDelta: zoomDelta || 0,\n            scaleWidth: scaleWidth,\n            scaleHeight: scaleHeight,\n            scale: scale\n        };\n    };\n    _proto.renderTiles = function renderTiles() {\n        var _this3 = this;\n        var _this$state11 = this.state, oldTiles = _this$state11.oldTiles, width = _this$state11.width, height = _this$state11.height;\n        var dprs = this.props.dprs;\n        var mapUrl = this.props.provider || osm;\n        var _this$tileValues = this.tileValues(this.state), tileMinX = _this$tileValues.tileMinX, tileMaxX = _this$tileValues.tileMaxX, tileMinY = _this$tileValues.tileMinY, tileMaxY = _this$tileValues.tileMaxY, tileCenterX = _this$tileValues.tileCenterX, tileCenterY = _this$tileValues.tileCenterY, roundedZoom = _this$tileValues.roundedZoom, scaleWidth = _this$tileValues.scaleWidth, scaleHeight = _this$tileValues.scaleHeight, scale = _this$tileValues.scale;\n        var tiles = [];\n        for(var i = 0; i < oldTiles.length; i++){\n            var old = oldTiles[i];\n            var zoomDiff = old.roundedZoom - roundedZoom;\n            if (Math.abs(zoomDiff) > 4 || zoomDiff === 0) {\n                continue;\n            }\n            var pow = 1 / Math.pow(2, zoomDiff);\n            var xDiff = -(tileMinX - old.tileMinX * pow) * 256;\n            var yDiff = -(tileMinY - old.tileMinY * pow) * 256;\n            var _xMin = Math.max(old.tileMinX, 0);\n            var _yMin = Math.max(old.tileMinY, 0);\n            var _xMax = Math.min(old.tileMaxX, Math.pow(2, old.roundedZoom) - 1);\n            var _yMax = Math.min(old.tileMaxY, Math.pow(2, old.roundedZoom) - 1);\n            for(var x = _xMin; x <= _xMax; x++){\n                for(var y = _yMin; y <= _yMax; y++){\n                    tiles.push({\n                        key: x + \"-\" + y + \"-\" + old.roundedZoom,\n                        url: mapUrl(x, y, old.roundedZoom),\n                        srcSet: srcSet(dprs, mapUrl, x, y, old.roundedZoom),\n                        left: xDiff + (x - old.tileMinX) * 256 * pow,\n                        top: yDiff + (y - old.tileMinY) * 256 * pow,\n                        width: 256 * pow,\n                        height: 256 * pow,\n                        active: false\n                    });\n                }\n            }\n        }\n        var xMin = Math.max(tileMinX, 0);\n        var yMin = Math.max(tileMinY, 0);\n        var xMax = Math.min(tileMaxX, Math.pow(2, roundedZoom) - 1);\n        var yMax = Math.min(tileMaxY, Math.pow(2, roundedZoom) - 1);\n        for(var _x = xMin; _x <= xMax; _x++){\n            for(var _y = yMin; _y <= yMax; _y++){\n                tiles.push({\n                    key: _x + \"-\" + _y + \"-\" + roundedZoom,\n                    url: mapUrl(_x, _y, roundedZoom),\n                    srcSet: srcSet(dprs, mapUrl, _x, _y, roundedZoom),\n                    left: (_x - tileMinX) * 256,\n                    top: (_y - tileMinY) * 256,\n                    width: 256,\n                    height: 256,\n                    active: true\n                });\n            }\n        }\n        var boxStyle = {\n            width: scaleWidth,\n            height: scaleHeight,\n            position: \"absolute\",\n            top: \"calc((100% - \" + height + \"px) / 2)\",\n            left: \"calc((100% - \" + width + \"px) / 2)\",\n            overflow: \"hidden\",\n            willChange: \"transform\",\n            transform: \"scale(\" + scale + \", \" + scale + \")\",\n            transformOrigin: \"top left\"\n        };\n        var boxClassname = this.props.boxClassname || \"pigeon-tiles-box\";\n        var left = -((tileCenterX - tileMinX) * 256 - scaleWidth / 2);\n        var top = -((tileCenterY - tileMinY) * 256 - scaleHeight / 2);\n        var tilesStyle = {\n            position: \"absolute\",\n            width: (tileMaxX - tileMinX + 1) * 256,\n            height: (tileMaxY - tileMinY + 1) * 256,\n            willChange: \"transform\",\n            transform: \"translate(\" + left + \"px, \" + top + \"px)\"\n        };\n        var Tile = this.props.tileComponent;\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            style: boxStyle,\n            className: boxClassname\n        }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            className: \"pigeon-tiles\",\n            style: tilesStyle\n        }, tiles.map(function(tile) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Tile, {\n                key: tile.key,\n                tile: tile,\n                tileLoaded: function tileLoaded() {\n                    return _this3.tileLoaded(tile.key);\n                }\n            });\n        })));\n    };\n    _proto.renderOverlays = function renderOverlays() {\n        var _this4 = this;\n        var _this$state12 = this.state, width = _this$state12.width, height = _this$state12.height, center = _this$state12.center;\n        var mapState = {\n            bounds: this.getBounds(),\n            zoom: this.zoomPlusDelta(),\n            center: center,\n            width: width,\n            height: height\n        };\n        var childrenWithProps = react__WEBPACK_IMPORTED_MODULE_0___default().Children.map(this.props.children, function(child) {\n            if (!child) {\n                return null;\n            }\n            if (!/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().isValidElement(child)) {\n                return child;\n            }\n            var _child$props = child.props, anchor = _child$props.anchor, position = _child$props.position, offset = _child$props.offset;\n            var c = _this4.latLngToPixel(anchor || position || center);\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(child, {\n                left: c[0] - (offset ? offset[0] : 0),\n                top: c[1] - (offset ? offset[1] : 0),\n                latLngToPixel: _this4.latLngToPixel,\n                pixelToLatLng: _this4.pixelToLatLng,\n                setCenterZoom: _this4.setCenterZoomForChildren,\n                mapProps: _this4.props,\n                mapState: mapState\n            });\n        });\n        var childrenStyle = {\n            position: \"absolute\",\n            width: width,\n            height: height,\n            top: \"calc((100% - \" + height + \"px) / 2)\",\n            left: \"calc((100% - \" + width + \"px) / 2)\"\n        };\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            className: \"pigeon-overlays\",\n            style: childrenStyle\n        }, childrenWithProps);\n    };\n    _proto.renderAttribution = function renderAttribution() {\n        var _this$props4 = this.props, attribution = _this$props4.attribution, attributionPrefix = _this$props4.attributionPrefix;\n        if (attribution === false) {\n            return null;\n        }\n        var style = {\n            position: \"absolute\",\n            bottom: 0,\n            right: 0,\n            fontSize: \"11px\",\n            padding: \"2px 5px\",\n            background: \"rgba(255, 255, 255, 0.7)\",\n            fontFamily: \"'Helvetica Neue', Helvetica, Arial, sans-serif\",\n            color: \"#333\"\n        };\n        var linkStyle = {\n            color: \"#0078A8\",\n            textDecoration: \"none\"\n        };\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            key: \"attr\",\n            className: \"pigeon-attribution\",\n            style: style\n        }, attributionPrefix === false ? null : /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", null, attributionPrefix || /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"a\", {\n            href: \"https://pigeon-maps.js.org/\",\n            style: linkStyle,\n            target: \"_blank\",\n            rel: \"noreferrer noopener\"\n        }, \"Pigeon\"), \" | \"), attribution || /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"span\", null, \" \\xa9 \", /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"a\", {\n            href: \"https://www.openstreetmap.org/copyright\",\n            style: linkStyle,\n            target: \"_blank\",\n            rel: \"noreferrer noopener\"\n        }, \"OpenStreetMap\"), \" contributors\"));\n    };\n    _proto.renderWarning = function renderWarning() {\n        var _this$props5 = this.props, metaWheelZoom = _this$props5.metaWheelZoom, metaWheelZoomWarning = _this$props5.metaWheelZoomWarning, twoFingerDrag = _this$props5.twoFingerDrag, twoFingerDragWarning = _this$props5.twoFingerDragWarning, warningZIndex = _this$props5.warningZIndex;\n        var _this$state13 = this.state, showWarning = _this$state13.showWarning, warningType = _this$state13.warningType, width = _this$state13.width, height = _this$state13.height;\n        if (metaWheelZoom && metaWheelZoomWarning || twoFingerDrag && twoFingerDragWarning) {\n            var style = {\n                position: \"absolute\",\n                top: 0,\n                left: 0,\n                width: width,\n                height: height,\n                overflow: \"hidden\",\n                pointerEvents: \"none\",\n                opacity: showWarning ? 100 : 0,\n                transition: \"opacity 300ms\",\n                background: \"rgba(0,0,0,0.5)\",\n                color: \"#fff\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                fontSize: 22,\n                fontFamily: '\"Arial\", sans-serif',\n                textAlign: \"center\",\n                zIndex: warningZIndex\n            };\n            var meta =  false ? 0 : \"ctrl\";\n            var warningText = warningType === \"fingers\" ? twoFingerDragWarning : metaWheelZoomWarning;\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n                className: \"pigeon-overlay-warning\",\n                style: style\n            }, warningText.replace(\"META\", meta));\n        } else {\n            return null;\n        }\n    };\n    _proto.render = function render() {\n        var _this$props6 = this.props, touchEvents = _this$props6.touchEvents, twoFingerDrag = _this$props6.twoFingerDrag;\n        var _this$state14 = this.state, width = _this$state14.width, height = _this$state14.height;\n        var containerStyle = {\n            width: this.props.width ? width : \"100%\",\n            height: this.props.height ? height : \"100%\",\n            position: \"relative\",\n            display: \"inline-block\",\n            overflow: \"hidden\",\n            background: \"#dddddd\",\n            touchAction: touchEvents ? twoFingerDrag ? \"pan-x pan-y\" : \"none\" : \"auto\"\n        };\n        var hasSize = !!(width && height);\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n            style: containerStyle,\n            ref: this.setRef,\n            dir: \"ltr\"\n        }, hasSize && this.renderTiles(), hasSize && this.renderOverlays(), hasSize && this.renderAttribution(), hasSize && this.renderWarning());\n    };\n    return Map;\n}(react__WEBPACK_IMPORTED_MODULE_0__.Component);\n_defineProperty(Map, \"defaultProps\", {\n    animate: true,\n    metaWheelZoom: false,\n    metaWheelZoomWarning: \"Use META + wheel to zoom!\",\n    twoFingerDrag: false,\n    twoFingerDragWarning: \"Use two fingers to move the map\",\n    zoomSnap: true,\n    mouseEvents: true,\n    touchEvents: true,\n    warningZIndex: 100,\n    animateMaxScreens: 5,\n    minZoom: 1,\n    maxZoom: 18,\n    limitBounds: \"center\",\n    dprs: [],\n    tileComponent: ImgTile\n});\nfunction Marker(props) {\n    var width = typeof props.width !== \"undefined\" ? props.width : typeof props.height !== \"undefined\" ? props.height * 29 / 34 : 29;\n    var height = typeof props.height !== \"undefined\" ? props.height : typeof props.width !== \"undefined\" ? props.width * 34 / 29 : 34;\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.hover || false), internalHover = _useState[0], setInternalHover = _useState[1];\n    var hover = typeof props.hover === \"undefined\" ? internalHover : props.hover;\n    var color = props.color || \"#93C0D0\";\n    var eventParameters = function eventParameters(event) {\n        return {\n            event: event,\n            anchor: props.anchor,\n            payload: props.payload\n        };\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        style: _objectSpread2({\n            position: \"absolute\",\n            transform: \"translate(\" + (props.left - width / 2) + \"px, \" + (props.top - (height - 1)) + \"px)\",\n            filter: hover ? \"drop-shadow(0 0 4px rgba(0, 0, 0, .3))\" : \"\",\n            pointerEvents: \"none\",\n            cursor: \"pointer\"\n        }, props.style || {}),\n        className: props.className ? props.className + \" pigeon-click-block\" : \"pigeon-click-block\",\n        onClick: props.onClick ? function(event) {\n            return props.onClick(eventParameters(event));\n        } : null,\n        onContextMenu: props.onContextMenu ? function(event) {\n            return props.onContextMenu(eventParameters(event));\n        } : null,\n        onMouseOver: function onMouseOver(event) {\n            props.onMouseOver && props.onMouseOver(eventParameters(event));\n            setInternalHover(true);\n        },\n        onMouseOut: function onMouseOut(event) {\n            props.onMouseOut && props.onMouseOut(eventParameters(event));\n            setInternalHover(false);\n        }\n    }, props.children || /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"svg\", {\n        width: width,\n        height: height,\n        viewBox: \"0 0 61 71\",\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"g\", {\n        style: {\n            pointerEvents: \"auto\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"path\", {\n        d: \"M52 31.5C52 36.8395 49.18 42.314 45.0107 47.6094C40.8672 52.872 35.619 57.678 31.1763 61.6922C30.7916 62.0398 30.2084 62.0398 29.8237 61.6922C25.381 57.678 20.1328 52.872 15.9893 47.6094C11.82 42.314 9 36.8395 9 31.5C9 18.5709 18.6801 9 30.5 9C42.3199 9 52 18.5709 52 31.5Z\",\n        fill: color,\n        stroke: \"white\",\n        strokeWidth: \"4\"\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"circle\", {\n        cx: \"30.5\",\n        cy: \"30.5\",\n        r: \"8.5\",\n        fill: \"white\",\n        opacity: hover ? 0.98 : 0.6\n    }))));\n}\nfunction Overlay(props) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        style: _objectSpread2({\n            position: \"absolute\",\n            transform: \"translate(\" + props.left + \"px, \" + props.top + \"px)\"\n        }, props.style || {}),\n        className: props.className ? props.className + \" pigeon-click-block\" : \"pigeon-click-block\"\n    }, props.children);\n}\nvar defaultSvgAttributes = {\n    fill: \"#93c0d099\",\n    strokeWidth: \"2\",\n    stroke: \"white\",\n    r: \"30\"\n};\nfunction PointComponent(props) {\n    var latLngToPixel = props.latLngToPixel;\n    var _props$coordinates = props.coordinates, y = _props$coordinates[0], x = _props$coordinates[1];\n    var _latLngToPixel = latLngToPixel([\n        x,\n        y\n    ]), cx = _latLngToPixel[0], cy = _latLngToPixel[1];\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"circle\", _objectSpread2({\n        cx: cx,\n        cy: cy\n    }, props.svgAttributes));\n}\nfunction MultiPoint(props) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, props.coordinates.map(function(point, i) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(PointComponent, _objectSpread2(_objectSpread2({}, props), {}, {\n            coordinates: point,\n            key: i\n        }));\n    }));\n}\nfunction LineString(props) {\n    var latLngToPixel = props.latLngToPixel;\n    var p = \"M\" + props.coordinates.reduce(function(a, _ref) {\n        var y = _ref[0], x = _ref[1];\n        var _latLngToPixel2 = latLngToPixel([\n            x,\n            y\n        ]), v = _latLngToPixel2[0], w = _latLngToPixel2[1];\n        return a + \" \" + v + \" \" + w;\n    }, \"\");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"path\", _objectSpread2({\n        d: p\n    }, props.svgAttributes));\n}\nfunction MultiLineString(props) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, props.coordinates.map(function(line, i) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(LineString, {\n            coordinates: line,\n            key: i\n        });\n    }));\n}\nfunction Polygon(props) {\n    var latLngToPixel = props.latLngToPixel;\n    var p = props.coordinates.reduce(function(a, part) {\n        return a + \" M\" + part.reduce(function(a, _ref2) {\n            var y = _ref2[0], x = _ref2[1];\n            var _latLngToPixel3 = latLngToPixel([\n                x,\n                y\n            ]), v = _latLngToPixel3[0], w = _latLngToPixel3[1];\n            return a + \" \" + v + \" \" + w;\n        }, \"\") + \"Z\";\n    }, \"\");\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"path\", _objectSpread2({\n        d: p\n    }, props.svgAttributes));\n}\nfunction MultiPolygon(props) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, props.coordinates.map(function(polygon, i) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Polygon, _objectSpread2(_objectSpread2({}, props), {}, {\n            coordinates: polygon,\n            key: i\n        }));\n    }));\n}\nfunction GeometryCollection(props) {\n    var renderer = {\n        Point: PointComponent,\n        MultiPoint: MultiPoint,\n        LineString: LineString,\n        MultiLineString: MultiLineString,\n        Polygon: Polygon,\n        MultiPolygon: MultiPolygon\n    };\n    var _props$geometry = props.geometry, type = _props$geometry.type, coordinates = _props$geometry.coordinates, geometries = _props$geometry.geometries;\n    if (type === \"GeometryCollection\") {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement((react__WEBPACK_IMPORTED_MODULE_0___default().Fragment), null, geometries.map(function(geometry, i) {\n            return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(GeometryCollection, _objectSpread2(_objectSpread2({\n                key: i\n            }, props), {}, {\n                geometry: geometry\n            }));\n        }));\n    }\n    var Component = renderer[type];\n    if (Component === undefined) {\n        console.warn(\"The GeoJson Type \" + type + \" is not known\");\n        return null;\n    }\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(Component, {\n        latLngToPixel: props.latLngToPixel,\n        geometry: props.geometry,\n        coordinates: coordinates,\n        svgAttributes: props.svgAttributes\n    });\n}\nfunction GeoJsonFeature(props) {\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.hover || false), internalHover = _useState[0], setInternalHover = _useState[1];\n    var hover = props.hover !== undefined ? props.hover : internalHover;\n    var callbackSvgAttributes = props.styleCallback && props.styleCallback(props.feature, hover);\n    var svgAttributes = callbackSvgAttributes ? props.svgAttributes ? _objectSpread2(_objectSpread2({}, props.svgAttributes), callbackSvgAttributes) : callbackSvgAttributes : props.svgAttributes ? props.svgAttributes : defaultSvgAttributes;\n    var eventParameters = function eventParameters(event) {\n        return {\n            event: event,\n            anchor: props.anchor,\n            payload: props.feature\n        };\n    };\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"g\", {\n        clipRule: \"evenodd\",\n        style: {\n            pointerEvents: \"auto\"\n        },\n        onClick: props.onClick ? function(event) {\n            return props.onClick(eventParameters(event));\n        } : null,\n        onContextMenu: props.onContextMenu ? function(event) {\n            return props.onContextMenu(eventParameters(event));\n        } : null,\n        onMouseOver: function onMouseOver(event) {\n            props.onMouseOver && props.onMouseOver(eventParameters(event));\n            setInternalHover(true);\n        },\n        onMouseOut: function onMouseOut(event) {\n            props.onMouseOut && props.onMouseOut(eventParameters(event));\n            setInternalHover(false);\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(GeometryCollection, _objectSpread2(_objectSpread2(_objectSpread2({}, props), props.feature), {}, {\n        svgAttributes: svgAttributes\n    })));\n}\nfunction GeoJson(props) {\n    var _props$mapState = props.mapState, width = _props$mapState.width, height = _props$mapState.height;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        style: _objectSpread2({\n            position: \"absolute\",\n            left: \"0\",\n            top: \"0\",\n            pointerEvents: \"none\",\n            cursor: \"pointer\"\n        }, props.style || {}),\n        className: props.className ? props.className + \" pigeon-click-block\" : \"pigeon-click-block\"\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"svg\", {\n        width: width,\n        height: height,\n        viewBox: \"0 0 \" + width + \" \" + height,\n        fill: \"none\",\n        xmlns: \"http://www.w3.org/2000/svg\"\n    }, props.data && props.data.features.map(function(feature, i) {\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(GeoJsonFeature, _objectSpread2(_objectSpread2({\n            key: i\n        }, props), {}, {\n            feature: feature\n        }));\n    }), react__WEBPACK_IMPORTED_MODULE_0___default().Children.map(props.children, function(child) {\n        if (!child) {\n            return null;\n        }\n        if (!/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().isValidElement(child)) {\n            return child;\n        }\n        return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().cloneElement(child, props);\n    })));\n}\nfunction GeoJsonLoader(props) {\n    var _useState2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(props.data ? props.data : null), data = _useState2[0], setData = _useState2[1];\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        fetch(props.link).then(function(response) {\n            return response.json();\n        }).then(function(data) {\n            return setData(data);\n        });\n    }, [\n        props.link\n    ]);\n    return data ? /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(GeoJson, _objectSpread2({\n        data: data\n    }, props)) : null;\n}\nfunction isDescendentOf(element, ancestor) {\n    while(element){\n        if (element === ancestor) {\n            return true;\n        }\n        element = element.parentElement;\n    }\n    return false;\n}\nvar defaultState = {\n    isDragging: false,\n    startX: undefined,\n    startY: undefined,\n    startLeft: undefined,\n    startTop: undefined,\n    deltaX: 0,\n    deltaY: 0\n};\nfunction Draggable(props) {\n    var dragRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    var propsRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(props);\n    var stateRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(_objectSpread2({}, defaultState));\n    var _useState = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(defaultState), _state = _useState[0], _setState = _useState[1];\n    propsRef.current = props;\n    var setState = function setState(stateUpdate) {\n        var newState = _objectSpread2(_objectSpread2({}, stateRef.current), stateUpdate);\n        stateRef.current = newState;\n        _setState(newState);\n    };\n    var _props$mapProps = props.mapProps, mouseEvents = _props$mapProps.mouseEvents, touchEvents = _props$mapProps.touchEvents;\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(function() {\n        var handleDragStart = function handleDragStart(event) {\n            if (isDescendentOf(event.target, dragRef.current)) {\n                event.preventDefault();\n                setState({\n                    isDragging: true,\n                    startX: (\"touches\" in event ? event.touches[0] : event).clientX,\n                    startY: (\"touches\" in event ? event.touches[0] : event).clientY,\n                    startLeft: propsRef.current.left,\n                    startTop: propsRef.current.top,\n                    deltaX: 0,\n                    deltaY: 0\n                });\n                if (propsRef.current.onDragStart) {\n                    var _propsRef$current = propsRef.current, _left = _propsRef$current.left, _top = _propsRef$current.top, offset = _propsRef$current.offset, pixelToLatLng = _propsRef$current.pixelToLatLng;\n                    propsRef.current.onDragMove(pixelToLatLng([\n                        _left + (offset ? offset[0] : 0),\n                        _top + (offset ? offset[1] : 0)\n                    ]));\n                }\n            }\n        };\n        var handleDragMove = function handleDragMove(event) {\n            if (!stateRef.current.isDragging) {\n                return;\n            }\n            event.preventDefault();\n            var x = (\"touches\" in event ? event.touches[0] : event).clientX;\n            var y = (\"touches\" in event ? event.touches[0] : event).clientY;\n            var deltaX = x - stateRef.current.startX;\n            var deltaY = y - stateRef.current.startY;\n            setState({\n                deltaX: deltaX,\n                deltaY: deltaY\n            });\n            if (propsRef.current.onDragMove) {\n                var _propsRef$current2 = propsRef.current, offset = _propsRef$current2.offset, pixelToLatLng = _propsRef$current2.pixelToLatLng;\n                var _stateRef$current = stateRef.current, _startLeft = _stateRef$current.startLeft, _startTop = _stateRef$current.startTop;\n                propsRef.current.onDragMove(pixelToLatLng([\n                    _startLeft + deltaX + (offset ? offset[0] : 0),\n                    _startTop + deltaY + (offset ? offset[1] : 0)\n                ]));\n            }\n        };\n        var handleDragEnd = function handleDragEnd(event) {\n            var _propsRef$current$onD, _propsRef$current4;\n            if (!stateRef.current.isDragging) {\n                return;\n            }\n            event.preventDefault();\n            var _propsRef$current3 = propsRef.current, offset = _propsRef$current3.offset, pixelToLatLng = _propsRef$current3.pixelToLatLng;\n            var _stateRef$current2 = stateRef.current, deltaX = _stateRef$current2.deltaX, deltaY = _stateRef$current2.deltaY, startLeft = _stateRef$current2.startLeft, startTop = _stateRef$current2.startTop;\n            (_propsRef$current$onD = (_propsRef$current4 = propsRef.current).onDragEnd) === null || _propsRef$current$onD === void 0 ? void 0 : _propsRef$current$onD.call(_propsRef$current4, pixelToLatLng([\n                startLeft + deltaX + (offset ? offset[0] : 0),\n                startTop + deltaY + (offset ? offset[1] : 0)\n            ]));\n            setState({\n                isDragging: false,\n                startX: undefined,\n                startY: undefined,\n                startLeft: undefined,\n                startTop: undefined,\n                deltaX: 0,\n                deltaY: 0\n            });\n        };\n        var wa = function wa(e, t, o) {\n            return window.addEventListener(e, t, o);\n        };\n        var wr = function wr(e, t) {\n            return window.removeEventListener(e, t);\n        };\n        if (mouseEvents) {\n            wa(\"mousedown\", handleDragStart);\n            wa(\"mousemove\", handleDragMove);\n            wa(\"mouseup\", handleDragEnd);\n        }\n        if (touchEvents) {\n            wa(\"touchstart\", handleDragStart, {\n                passive: false\n            });\n            wa(\"touchmove\", handleDragMove, {\n                passive: false\n            });\n            wa(\"touchend\", handleDragEnd, {\n                passive: false\n            });\n        }\n        return function() {\n            if (mouseEvents) {\n                wr(\"mousedown\", handleDragStart);\n                wr(\"mousemove\", handleDragMove);\n                wr(\"mouseup\", handleDragEnd);\n            }\n            if (touchEvents) {\n                wr(\"touchstart\", handleDragStart);\n                wr(\"touchmove\", handleDragMove);\n                wr(\"touchend\", handleDragEnd);\n            }\n        };\n    }, [\n        mouseEvents,\n        touchEvents\n    ]);\n    var left = props.left, top = props.top, className = props.className, style = props.style;\n    var deltaX = _state.deltaX, deltaY = _state.deltaY, startLeft = _state.startLeft, startTop = _state.startTop, isDragging = _state.isDragging;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        style: _objectSpread2(_objectSpread2({\n            cursor: isDragging ? \"grabbing\" : \"grab\"\n        }, style || {}), {}, {\n            position: \"absolute\",\n            transform: \"translate(\" + (isDragging ? startLeft + deltaX : left) + \"px, \" + (isDragging ? startTop + deltaY : top) + \"px)\"\n        }),\n        ref: dragRef,\n        className: \"pigeon-drag-block\" + (className ? \" \" + className : \"\")\n    }, props.children);\n}\nvar commonStyle = {\n    position: \"absolute\",\n    top: 10,\n    left: 10\n};\nvar commonButtonStyle = {\n    width: 28,\n    height: 28,\n    borderRadius: 2,\n    boxShadow: \"0 1px 4px -1px rgba(0,0,0,.3)\",\n    background: \"white\",\n    lineHeight: \"26px\",\n    fontSize: \"20px\",\n    fontWeight: 700,\n    color: \"#666\",\n    marginBottom: 1,\n    cursor: \"pointer\",\n    border: \"none\",\n    display: \"block\",\n    outline: \"none\"\n};\nfunction ZoomControl(_ref) {\n    var style = _ref.style, buttonStyle = _ref.buttonStyle, setCenterZoom = _ref.setCenterZoom, mapState = _ref.mapState, mapProps = _ref.mapProps;\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"div\", {\n        className: \"pigeon-zoom-buttons pigeon-drag-block\",\n        style: style ? _objectSpread2(_objectSpread2({}, commonStyle), style) : commonStyle\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n        className: \"pigeon-zoom-in\",\n        type: \"button\",\n        style: buttonStyle ? _objectSpread2(_objectSpread2({}, commonButtonStyle), buttonStyle) : commonButtonStyle,\n        onClick: function onClick() {\n            return setCenterZoom(mapState.center, Math.min(mapState.zoom + 1, mapProps.maxZoom));\n        }\n    }, \"+\"), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\"button\", {\n        className: \"pigeon-zoom-out\",\n        type: \"button\",\n        style: buttonStyle ? _objectSpread2(_objectSpread2({}, commonButtonStyle), buttonStyle) : commonButtonStyle,\n        onClick: function onClick() {\n            return setCenterZoom(mapState.center, Math.max(mapState.zoom - 1, mapProps.minZoom));\n        }\n    }, \"–\"));\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pigeon-maps/lib/index.esm.js\n");

/***/ })

};
;